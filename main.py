import re
import requests
import spacy
from summa.summarizer import summarize

nlp = spacy.load('en_core_web_sm')

def is_human(commit_message):
    # Check if the commit message is empty or contains only whitespace
    if not commit_message or commit_message.isspace():
        return False

    # Check if the commit message contains typical bot keywords or patterns
    bot_keywords = ["chore", "bot", "automated", "auto-generated", "continuous integration", "pipeline", "release"]
    bot_patterns = [r"^Merge branch '.+' of .+$", r"^Merge pull request #\d+ from .+$"]

    for keyword in bot_keywords:
        if keyword in commit_message.lower():
            return False

    for pattern in bot_patterns:
        if re.match(pattern, commit_message):
            return False

    return True


def is_important(commit):
    # Check if a commit is important by counting the number of tokens
    # in the commit message. Tokens are generated by a pre-trained library called spacy
    doc = nlp(commit)
    if len(doc) > 10:
        return True
    return False

def shorten_long_commit(commit):
    summary = summarize(commit, ratio=0.4)
    return summary

def clean_commits(commits):
    # remove all non-human and non-important commits
    # summarize long commits using pre-trained library GPT-2
    cleaned_commit = []
    for commit in commits:
        if is_human(commit) and is_important(commit):
            if len(commit) > 140:
                commit = shorten_long_commit(commit)
            cleaned_commit.append(commit)
    return cleaned_commit

def classify_changes(commit):
    # just naive and runnable code, will be update later
    exception = ['security', 'authenticate', 'authentication', 'auth']
    for ex in exception:
        if ex in commit.lower():
            return 'Security'

    types = ['add', 'fix', 'change', 'remove', 'deprecate']
    res = ['Added', 'Fixed', 'Changed', 'Removed', 'Deprecated']
    words = commit.split()
    for word in words:
        for i in range(0, 5):
            if types[i] in word.lower():
                return res[i]

    return 'Other'

def generate_changelog(commits):
    # generate a changelog from list of cleaned commits
    changelog = {}
    for commit in commits:
        change_type = classify_changes(commit)
        if change_type not in changelog:
            changelog[change_type] = [commit]
        else:
            changelog[change_type].append(commit)
    output = ''
    for change_type in ['Added', 'Changed', 'Deprecated', 'Removed', 'Fixed', 'Security']:
        if change_type in changelog:
            output += f'## {change_type}\n\n'
            for commit in changelog[change_type]:
                output += f'- {commit}\n'
            output += '\n'
    return output


def main():
    # open input file, generate and save result in a output file
    with open('input.txt', 'r') as file:
        commits = file.readlines()
    res = generate_changelog(clean_commits(commits))
    with open('output.txt', 'w') as f:
        f.write(res)



if __name__ == "__main__":
    main()